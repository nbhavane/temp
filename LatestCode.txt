Working code:

<Window x:Class="Redshift_Query_Generator_2._0.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Redshift Query Generator 2.0"
        Height="740" Width="820"
        Background="#800080">

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- title -->
        <TextBlock Text="Redshift Query Generator 2.0"
                   FontSize="24"
                   FontWeight="Bold"
                   Foreground="White"
                   HorizontalAlignment="Center"
                   Margin="0,0,0,20"/>

        <!-- action selector -->
        <StackPanel Grid.Row="1" Orientation="Horizontal"
                    HorizontalAlignment="Center"
                    Margin="0,0,0,20">
            <TextBlock Text="Select Action:"
                       Foreground="White"
                       VerticalAlignment="Center"
                       Margin="0,0,10,0"/>
            <ComboBox x:Name="ActionComboBox" Width="230"
                      SelectionChanged="ActionComboBox_SelectionChanged">
                <ComboBoxItem Content="Schema Creation"/>
                <ComboBoxItem Content="Access"/>
                <ComboBoxItem Content="ARL Access"/>
                <ComboBoxItem Content="All RO RW Access"/>
                <ComboBoxItem Content="Grants and Alters"/>
            </ComboBox>
        </StackPanel>

        <!-- panels container -->
        <ScrollViewer Grid.Row="2">
            <StackPanel>

                <!-- Schema-Creation -->
                <StackPanel x:Name="SchemaCreationPanel" Visibility="Collapsed">
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Business Unit:" Width="150" Foreground="White"/>
                        <TextBox x:Name="BusinessUnitTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Schema Name:" Width="150" Foreground="White"/>
                        <TextBox x:Name="SchemaNameTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Schema Type:" Width="150" Foreground="White"/>
                        <RadioButton x:Name="SecuredRadio"     Content="Secured"      GroupName="SC_Type" Foreground="White" Margin="0,0,20,0"/>
                        <RadioButton x:Name="NonSecuredRadio" Content="Non Secured" GroupName="SC_Type" Foreground="White"/>
                    </StackPanel>
                </StackPanel>

                <!-- Access -->
                <StackPanel x:Name="AccessPanel" Visibility="Collapsed">
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Business Unit:" Width="150" Foreground="White"/>
                        <TextBox x:Name="AccessBusinessUnitTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Number of Schemas:" Width="150" Foreground="White"/>
                        <TextBox x:Name="SchemasCountTextBox" Width="220"
                                 LostFocus="SchemasCountTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Number of Users:" Width="150" Foreground="White"/>
                        <TextBox x:Name="UsersCountTextBox" Width="220"
                                 LostFocus="UsersCountTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Access Type:" Width="150" Foreground="White"/>
                        <RadioButton x:Name="ReadOnlyRadio"  Content="Read Only"  GroupName="AC_Type" Foreground="White" Margin="0,0,20,0"/>
                        <RadioButton x:Name="ReadWriteRadio" Content="Read Write" GroupName="AC_Type" Foreground="White"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Schema Type:" Width="150" Foreground="White"/>
                        <RadioButton x:Name="AccessSecuredRadio"     Content="Secured"      GroupName="AC_SC" Foreground="White" Margin="0,0,20,0"/>
                        <RadioButton x:Name="AccessNonSecuredRadio" Content="Non Secured" GroupName="AC_SC" Foreground="White"/>
                    </StackPanel>
                </StackPanel>

                <!-- ARL Access -->
                <StackPanel x:Name="ArlPanel" Visibility="Collapsed">
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Datashare Name:" Width="150" Foreground="White"/>
                        <TextBox x:Name="ArlDatashareTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="ARL Schema Name:" Width="150" Foreground="White"/>
                        <TextBox x:Name="ArlSchemaTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Username:" Width="150" Foreground="White"/>
                        <TextBox x:Name="ArlUserTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Business Unit:" Width="150" Foreground="White"/>
                        <TextBox x:Name="ArlBusinessUnitTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <TextBlock Text="Note: Use the following query to view the virtual database:"
           Foreground="LightYellow"
           Margin="0,5,0,0"
           FontStyle="Italic"/>
                    <TextBox Text="select * from pg_database"
         IsReadOnly="True"
         Background="#333"
         Foreground="#00FF00"
         FontFamily="Consolas"
         FontSize="13"
         Padding="4"
         BorderThickness="0"
         Margin="0,0,0,10"
         Width="400"/>

                </StackPanel>

                <!-- All RO/RW Access -->
                <StackPanel x:Name="AllPanel" Visibility="Collapsed">
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Business Unit:" Width="150" Foreground="White"/>
                        <TextBox x:Name="AllBusinessUnitTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Username:" Width="150" Foreground="White"/>
                        <TextBox x:Name="AllUsernameTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Access Type:" Width="150" Foreground="White"/>
                        <RadioButton x:Name="AllRORadio" Content="All RO" GroupName="ALLAC" Foreground="White" Margin="0,0,20,0"/>
                        <RadioButton x:Name="AllRWRadio" Content="All RW" GroupName="ALLAC" Foreground="White"/>
                    </StackPanel>
                </StackPanel>

                <!-- Grants & Alters -->
                <StackPanel x:Name="GrantPanel" Visibility="Collapsed">
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Number of Schemas:" Width="150" Foreground="White"/>
                        <TextBox x:Name="GrantSchemasCountTextBox" Width="220"
                                 LostFocus="GrantSchemasCountTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Username:" Width="150" Foreground="White"/>
                        <TextBox x:Name="GrantUsernameTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Business Unit:" Width="150" Foreground="White"/>
                        <TextBox x:Name="GrantBusinessUnitTextBox" Width="220" LostFocus="AnyTextBox_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,5">
                        <TextBlock Text="Schema Type:" Width="150" Foreground="White"/>
                        <RadioButton x:Name="GrantSecuredRadio"     Content="Secured"      GroupName="GR_SC" Foreground="White" Margin="0,0,20,0"/>
                        <RadioButton x:Name="GrantNonSecuredRadio" Content="Non Secured" GroupName="GR_SC" Foreground="White"/>
                    </StackPanel>
                </StackPanel>
 
            </StackPanel>
        </ScrollViewer>

        <!-- buttons + output -->
        <StackPanel Grid.Row="3" HorizontalAlignment="Center"
                    Margin="0,20,0,0" x:Name="GeneratePanel" Visibility="Collapsed">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                <Button Content="Generate Query" Width="150" Height="35"
                        Background="#7D5FFF" Foreground="White"
                        FontWeight="Bold" Margin="8,0"
                        Click="GenerateQuery_Click"/>
                <Button Content="Clear" Width="100" Height="35"
                        Background="Gray" Foreground="White"
                        FontWeight="Bold" Margin="8,0"
                        Click="ClearButton_Click"/>
                <Button Content="Save to File" Width="120" Height="35"
                        Background="DarkGreen" Foreground="White"
                        FontWeight="Bold" Margin="8,0"
                        Click="SaveButton_Click"/>
                <Button Content="Copy to Clipboard" Width="150" Height="35"
        Background="Orange" Foreground="Black"
        FontWeight="Bold" Margin="8,0"
        Click="CopyToClipboard_Click"/>

            </StackPanel>
            <TextBlock Text="Inputs by User:"
           FontWeight="Bold"
           Foreground="White"
           Margin="0,20,0,5"
           FontSize="14"/>
            <TextBox x:Name="SummaryBox"
         Height="100" Width="720"
         TextWrapping="Wrap"
         AcceptsReturn="True"
         IsReadOnly="True"
         VerticalScrollBarVisibility="Auto"
         Background="#DDDDDD"/>

            <TextBlock Text="Generated Query:"
FontWeight="Bold"
Foreground="White"
Margin="0,20,0,5"
FontSize="14"/>
            <TextBox x:Name="QueryOutput" Height="180" Width="720"
                     Margin="0,20,0,0"
                     TextWrapping="Wrap"
                     AcceptsReturn="True"
                     VerticalScrollBarVisibility="Auto"/>
        </StackPanel>
        
    </Grid>
</Window>







CS CODE:

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using Microsoft.Win32;
using Microsoft.VisualBasic;

namespace Redshift_Query_Generator_2._0
{
    public partial class MainWindow : Window
    {
        /* holds schemas & users collected via pop-ups */
        private readonly List<string> _schemas = new();
        private readonly List<string> _users = new();

        public MainWindow() => InitializeComponent();
        private void CopyToClipboard_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrWhiteSpace(QueryOutput.Text))
            {
                Clipboard.SetText(QueryOutput.Text);
                MessageBox.Show("Query copied to clipboard.");
            }
            else
            {
                MessageBox.Show("No query to copy.");
            }
        }

        /*────────── Panel Visibility ─────────*/
        private void ActionComboBox_SelectionChanged(object _, SelectionChangedEventArgs __)
        {
            SchemaCreationPanel.Visibility =
            AccessPanel.Visibility =
            ArlPanel.Visibility =
            AllPanel.Visibility =
            GrantPanel.Visibility = Visibility.Collapsed;

            GeneratePanel.Visibility = Visibility.Collapsed;
            SummaryBox.Clear();
            QueryOutput.Clear();


            string sel = (ActionComboBox.SelectedItem as ComboBoxItem)?.Content?.ToString();
            if (sel == "Schema Creation") SchemaCreationPanel.Visibility = GeneratePanel.Visibility = Visibility.Visible;
            else if (sel == "Access") AccessPanel.Visibility = GeneratePanel.Visibility = Visibility.Visible;
            else if (sel == "ARL Access") ArlPanel.Visibility = GeneratePanel.Visibility = Visibility.Visible;
            else if (sel == "All RO RW Access") AllPanel.Visibility = GeneratePanel.Visibility = Visibility.Visible;
            else if (sel == "Grants and Alters") GrantPanel.Visibility = GeneratePanel.Visibility = Visibility.Visible;
        }

        /*────────── Pop-up Helpers ─────────*/
        private void UpdateSummaryBox()
        {
            string currentAction = (ActionComboBox.SelectedItem as ComboBoxItem)?.Content?.ToString();
            SummaryBox.Text = GenerateSummary(currentAction);
        }

        private void SchemasCountTextBox_LostFocus(object _, RoutedEventArgs __)
        {
            CollectSchemas(SchemasCountTextBox);
            UpdateSummaryBox();
        }

        private void GrantSchemasCountTextBox_LostFocus(object _, RoutedEventArgs __)
        {
            CollectSchemas(GrantSchemasCountTextBox);
            UpdateSummaryBox();
        }

        private void UsersCountTextBox_LostFocus(object _, RoutedEventArgs __)
        {
            _users.Clear();
            if (!int.TryParse(UsersCountTextBox.Text, out int n) || n <= 0) return;
            for (int i = 1; i <= n; i++)
            {
                string val = Interaction.InputBox($"Enter username {i}:", "User Input", "");
                if (string.IsNullOrWhiteSpace(val)) { _users.Clear(); break; }
                _users.Add(val.Trim().ToLower());
            }

            string currentAction = (ActionComboBox.SelectedItem as ComboBoxItem)?.Content?.ToString();
            SummaryBox.Text = GenerateSummary(currentAction);
            UpdateSummaryBox();
        }
        private void AnyTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            UpdateSummaryBox();
        }



        private void CollectSchemas(TextBox source)
        {
            _schemas.Clear();
            if (!int.TryParse(source.Text, out int n) || n <= 0) return;
            for (int i = 1; i <= n; i++)
            {
                string val = Interaction.InputBox($"Enter schema name {i}:", "Schema Input", "");
                if (string.IsNullOrWhiteSpace(val)) { _schemas.Clear(); break; }
                _schemas.Add(val.Trim().ToLower());
            }
        }

        /*────────── Generate ─────────*/
        private void GenerateQuery_Click(object _, RoutedEventArgs __)
        {
            string sel = (ActionComboBox.SelectedItem as ComboBoxItem)?.Content?.ToString();
            var sb = new StringBuilder();

            bool ok = sel switch
            {
                "Schema Creation" => BuildSchemaCreation(sb),
                "Access" => BuildAccess(sb),
                "ARL Access" => BuildArl(sb),
                "All RO RW Access" => BuildAll(sb),
                "Grants and Alters" => BuildGrantAlter(sb),
                _ => false
            };

            if (ok) QueryOutput.Text = sb.ToString();
            SummaryBox.Text = GenerateSummary(sel);

        }
        private string GenerateSummary(string action)
        {
            var summary = new StringBuilder();
            summary.AppendLine("Selected Action: " + action);
            switch (action)
            {
                case "Schema Creation":
                    summary.AppendLine("Business Unit: " + BusinessUnitTextBox.Text);
                    summary.AppendLine("Schema Name: " + SchemaNameTextBox.Text);
                    summary.AppendLine("Schema Type: " + (SecuredRadio.IsChecked == true ? "Secured" : "Non Secured"));
                    break;

                case "Access":
                    summary.AppendLine("Business Unit: " + AccessBusinessUnitTextBox.Text);
                    summary.AppendLine("Schemas: " + string.Join(", ", _schemas));
                    summary.AppendLine("Users: " + string.Join(", ", _users));
                    summary.AppendLine("Access Type: " + (ReadOnlyRadio.IsChecked == true ? "Read Only" : "Read Write"));
                    summary.AppendLine("Schema Type: " + (AccessSecuredRadio.IsChecked == true ? "Secured" : "Non Secured"));
                    break;

                case "ARL Access":
                    summary.AppendLine("Datashare: " + ArlDatashareTextBox.Text);
                    summary.AppendLine("ARL Schema: " + ArlSchemaTextBox.Text);
                    summary.AppendLine("Username: " + ArlUserTextBox.Text);
                    summary.AppendLine("Business Unit: " + ArlBusinessUnitTextBox.Text);
                    break;

                case "All RO RW Access":
                    summary.AppendLine("Business Unit: " + AllBusinessUnitTextBox.Text);
                    summary.AppendLine("Username: " + AllUsernameTextBox.Text);
                    summary.AppendLine("Access Type: " + (AllRORadio.IsChecked == true ? "All RO" : "All RW"));
                    break;

                case "Grants and Alters":
                    summary.AppendLine("Business Unit: " + GrantBusinessUnitTextBox.Text);
                    summary.AppendLine("Username: " + GrantUsernameTextBox.Text);
                    summary.AppendLine("Schemas: " + string.Join(", ", _schemas));
                    summary.AppendLine("Schema Type: " + (GrantSecuredRadio.IsChecked == true ? "Secured" : "Non Secured"));
                    break;
            }
            return summary.ToString();
        }


        /*────────── Schema Creation ─────────*/
        private bool BuildSchemaCreation(StringBuilder sb)
        {
            string bu = BusinessUnitTextBox.Text.Trim().ToLower();
            string sc = SchemaNameTextBox.Text.Trim().ToLower();
            bool secured = SecuredRadio.IsChecked == true;

            if (string.IsNullOrWhiteSpace(bu) || string.IsNullOrWhiteSpace(sc))
            { MessageBox.Show("Business Unit & Schema Name required."); return false; }
            if (bu == "commercial us") bu = "comm";

            sb.AppendLine($"CREATE SCHEMA IF NOT EXISTS {sc};");
            sb.AppendLine($"CREATE GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine($"CREATE GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine();
            sb.AppendLine($"GRANT USAGE ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine($"GRANT SELECT ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine($"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} GRANT SELECT ON TABLES TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine();
            sb.AppendLine($"GRANT ALL ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($"GRANT ALL ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} GRANT ALL ON TABLES TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine();

            if (!secured)
            {
                sb.AppendLine($"GRANT USAGE ON SCHEMA {sc} TO GROUP local_redshift_{bu}_all_ro;");
                sb.AppendLine($"GRANT SELECT ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_all_ro;");
                sb.AppendLine($"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} GRANT SELECT ON TABLES TO GROUP local_redshift_{bu}_all_ro;");
                sb.AppendLine();
                sb.AppendLine($"GRANT ALL ON SCHEMA {sc} TO GROUP local_redshift_{bu}_all_rw;");
                sb.AppendLine($"GRANT ALL ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_all_rw;");
                sb.AppendLine($"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} GRANT ALL ON TABLES TO GROUP local_redshift_{bu}_all_rw;");
            }
            return true;
        }

        /*────────── Access ─────────*/
        private bool BuildAccess(StringBuilder sb)
        {
            string bu = AccessBusinessUnitTextBox.Text.Trim().ToLower();
            if (string.IsNullOrWhiteSpace(bu)) { MessageBox.Show("Business Unit required."); return false; }
            if (bu == "commercial us") bu = "comm";
            if (_schemas.Count == 0 || _users.Count == 0)
            { MessageBox.Show("Enter schema & user counts, then names."); return false; }

            bool ro = ReadOnlyRadio.IsChecked == true;
            bool rw = ReadWriteRadio.IsChecked == true;
            bool sec = AccessSecuredRadio.IsChecked == true;
            bool nsec = AccessNonSecuredRadio.IsChecked == true;

            if (!ro && !rw) { MessageBox.Show("Choose Access Type."); return false; }
            if (rw && !sec && !nsec) { MessageBox.Show("Choose Schema Type."); return false; }

            foreach (var sc in _schemas)
                foreach (var us in _users)
                {
                    if (ro)
                    {
                        sb.AppendLine($@"ALTER GROUP local_redshift_{bu}_users_{sc}_ro ADD USER ""{us}@jazzpharma.com"";");
                    }
                    else
                    {
                        sb.AppendLine($@"ALTER GROUP local_redshift_{bu}_users_{sc}_rw ADD USER ""{us}@jazzpharma.com"";");
                        sb.AppendLine($@"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} FOR USER ""{us}@jazzpharma.com"" GRANT ALL  ON TABLES TO GROUP local_redshift_{bu}_users_{sc}_rw;");
                        sb.AppendLine($@"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} FOR USER ""{us}@jazzpharma.com"" GRANT SELECT ON TABLES TO GROUP local_redshift_{bu}_users_{sc}_ro;");
                        if (sec) AddSecuredBlock(sb, bu, sc);
                        if (nsec) AddNonSecuredBlock(sb, bu, sc, us);
                    }
                    sb.AppendLine();
                }
            return true;
        }

        private static void AddSecuredBlock(StringBuilder sb, string bu, string sc)
        {
            sb.AppendLine($@"GRANT ALL ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($@"GRANT ALL ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($@"GRANT USAGE ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine($@"GRANT SELECT ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
        }

        private static void AddNonSecuredBlock(StringBuilder sb, string bu, string sc, string us)
        {
            sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" IN SCHEMA {sc} GRANT ALL ON TABLES TO GROUP local_redshift_{bu}_users_{sc}_all_rw;");
            sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" IN SCHEMA {sc} GRANT SELECT ON TABLES TO GROUP local_redshift_{bu}_users_{sc}_all_ro;");
            sb.AppendLine($@"GRANT ALL ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($@"GRANT ALL ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($@"GRANT USAGE ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine($@"GRANT SELECT ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine($@"GRANT ALL ON SCHEMA {sc} TO GROUP local_redshift_{bu}_all_rw;");
            sb.AppendLine($@"GRANT ALL ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_all_rw;");
            sb.AppendLine($@"GRANT USAGE ON SCHEMA {sc} TO GROUP local_redshift_{bu}_all_ro;");
            sb.AppendLine($@"GRANT SELECT ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_all_ro;");
        }

        /*────────── ARL Access ─────────*/
        private bool BuildArl(StringBuilder sb)
        {
            string ds = ArlDatashareTextBox.Text.Trim();
            string sc = ArlSchemaTextBox.Text.Trim().ToLower();
            string us = ArlUserTextBox.Text.Trim().ToLower();
            string bu = ArlBusinessUnitTextBox.Text.Trim().ToLower();

            if (string.IsNullOrWhiteSpace(ds) || string.IsNullOrWhiteSpace(sc) ||
                string.IsNullOrWhiteSpace(us) || string.IsNullOrWhiteSpace(bu))
            { MessageBox.Show("Fill all ARL Access fields."); return false; }
            if (bu == "commercial us") bu = "comm";

            sb.AppendLine($"GRANT USAGE ON DATABASE {ds} TO \"{us}@jazzpharma.com\";");
            sb.AppendLine();
            sb.AppendLine($"ALTER GROUP local_redshift_{bu}_users_{sc}_rw ADD USER \"{us}@jazzpharma.com\";");
            sb.AppendLine($"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} FOR USER \"{us}@jazzpharma.com\" GRANT ALL ON TABLES TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} FOR USER \"{us}@jazzpharma.com\" GRANT SELECT ON TABLES TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine($"GRANT ALL ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($"GRANT ALL ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
            sb.AppendLine($"GRANT USAGE ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            sb.AppendLine($"GRANT SELECT ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
            return true;
        }

        /*────────── All RO RW Access ─────────*/
        private bool BuildAll(StringBuilder sb)
        {
            string bu = AllBusinessUnitTextBox.Text.Trim().ToLower();
            string us = AllUsernameTextBox.Text.Trim().ToLower();

            if (string.IsNullOrWhiteSpace(bu) || string.IsNullOrWhiteSpace(us))
            { MessageBox.Show("Business Unit and Username required."); return false; }
            if (bu == "commercial us") bu = "comm";

            bool allRo = AllRORadio.IsChecked == true;
            bool allRw = AllRWRadio.IsChecked == true;
            if (!allRo && !allRw) { MessageBox.Show("Choose All RO or All RW."); return false; }

            if (allRo)
            {
                sb.AppendLine($@"ALTER GROUP local_redshift_{bu}_all_ro ADD USER ""{us}@jazzpharma.com"";");
                sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" GRANT SELECT ON TABLES TO GROUP local_redshift_{bu}_all_ro;");
            }
            else
            {
                sb.AppendLine($@"ALTER GROUP local_redshift_{bu}_all_rw ADD USER ""{us}@jazzpharma.com"";");
                sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" GRANT ALL   ON TABLES TO GROUP local_redshift_{bu}_all_rw;");
                sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" GRANT SELECT ON TABLES TO GROUP local_redshift_{bu}_all_ro;");
            }
            return true;
        }

        /*────────── Grants & Alters ─────────*/
        private bool BuildGrantAlter(StringBuilder sb)
        {
            string bu = GrantBusinessUnitTextBox.Text.Trim().ToLower();
            string us = GrantUsernameTextBox.Text.Trim().ToLower();

            if (string.IsNullOrWhiteSpace(bu) || string.IsNullOrWhiteSpace(us))
            { MessageBox.Show("Business Unit & Username required."); return false; }
            if (_schemas.Count == 0)
            { MessageBox.Show("Enter #schemas then their names."); return false; }
            if (bu == "commercial us") bu = "comm";

            bool secured = GrantSecuredRadio.IsChecked == true;
            bool nonSec = GrantNonSecuredRadio.IsChecked == true;
            if (!secured && !nonSec)
            { MessageBox.Show("Choose schema type."); return false; }

            foreach (string sc in _schemas)
            {
                sb.AppendLine($@"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} FOR USER ""{us}@jazzpharma.com"" GRANT ALL   ON TABLES     TO GROUP local_redshift_{bu}_users_{sc}_rw;");
                sb.AppendLine($@"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} FOR USER ""{us}@jazzpharma.com"" GRANT SELECT ON TABLES     TO GROUP local_redshift_{bu}_users_{sc}_ro;");

                if (nonSec)
                {
                    sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" IN SCHEMA {sc} GRANT ALL   ON TABLES TO GROUP local_redshift_{bu}_all_rw;");
                    sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" IN SCHEMA {sc} GRANT SELECT ON TABLES TO GROUP local_redshift_{bu}_all_ro;");
                }

                sb.AppendLine($@"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} FOR USER ""{us}@jazzpharma.com"" GRANT EXECUTE ON PROCEDURES TO GROUP local_redshift_{bu}_users_{sc}_rw;");
                sb.AppendLine($@"ALTER DEFAULT PRIVILEGES IN SCHEMA {sc} FOR USER ""{us}@jazzpharma.com"" GRANT EXECUTE ON PROCEDURES TO GROUP local_redshift_{bu}_users_{sc}_ro;");

                if (nonSec)
                {
                    sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" GRANT EXECUTE ON PROCEDURES TO GROUP local_redshift_{bu}_all_rw;");
                    sb.AppendLine($@"ALTER DEFAULT PRIVILEGES FOR USER ""{us}@jazzpharma.com"" GRANT EXECUTE ON PROCEDURES TO GROUP local_redshift_{bu}_all_ro;");
                }

                sb.AppendLine($@"GRANT ALL   ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
                sb.AppendLine($@"GRANT ALL   ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_rw;");
                sb.AppendLine($@"GRANT USAGE ON SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");
                sb.AppendLine($@"GRANT SELECT ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_users_{sc}_ro;");

                if (nonSec)
                {
                    sb.AppendLine($@"GRANT ALL   ON SCHEMA {sc} TO GROUP local_redshift_{bu}_all_rw;");
                    sb.AppendLine($@"GRANT ALL   ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_all_rw;");
                    sb.AppendLine($@"GRANT USAGE ON SCHEMA {sc} TO GROUP local_redshift_{bu}_all_ro;");
                    sb.AppendLine($@"GRANT SELECT ON ALL TABLES IN SCHEMA {sc} TO GROUP local_redshift_{bu}_all_ro;");
                }
                sb.AppendLine();
            }
            return true;
        }

        /*────────── Clear & Save ─────────*/
        private void ClearButton_Click(object sender, RoutedEventArgs e)
        {
            // Clear all textboxes inside all panels
            foreach (var panel in new Panel[] {
        SchemaCreationPanel, AccessPanel, ArlPanel,
        AllPanel, GrantPanel
    })
            {
                foreach (var child in panel.Children)
                {
                    if (child is StackPanel innerPanel)
                    {
                        foreach (var ctrl in innerPanel.Children)
                        {
                            if (ctrl is TextBox tb)
                                tb.Clear();
                            else if (ctrl is RadioButton rb)
                                rb.IsChecked = false;
                        }
                    }
                }
            }

            // Clear query output
            QueryOutput.Clear();

            // Reset internal lists
            _schemas.Clear();
            _users.Clear();
            SummaryBox.Clear();
        }

        private void SaveButton_Click(object _, RoutedEventArgs __)
        {
            if (string.IsNullOrWhiteSpace(QueryOutput.Text))
            { MessageBox.Show("Nothing to save."); return; }

            var dlg = new SaveFileDialog { FileName = "redshift_query", DefaultExt = ".txt", Filter = "Text files (*.txt)|*.txt" };
            if (dlg.ShowDialog() == true)
            {
                File.WriteAllText(dlg.FileName, QueryOutput.Text);
                MessageBox.Show("Saved.");
            }
        }
    }
}
